/* tslint:disable */
/* eslint-disable */
/**
 * open-api-fwe
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface PostReiseRequest
 */
export interface PostReiseRequest {
    /**
     * 
     * @type {string}
     * @memberof PostReiseRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostReiseRequest
     */
    'beschreibung': string;
    /**
     * 
     * @type {string}
     * @memberof PostReiseRequest
     */
    'teilnehmer': string;
}
/**
 * 
 * @export
 * @interface PostReisezielRequest
 */
export interface PostReisezielRequest {
    /**
     * 
     * @type {string}
     * @memberof PostReisezielRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostReisezielRequest
     */
    'beschreibung': string;
    /**
     * 
     * @type {string}
     * @memberof PostReisezielRequest
     */
    'datumvon': string;
    /**
     * 
     * @type {string}
     * @memberof PostReisezielRequest
     */
    'datumbis': string;
    /**
     * 
     * @type {string}
     * @memberof PostReisezielRequest
     */
    'activities': string;
}
/**
 * 
 * @export
 * @interface PutReiseIdRequest
 */
export interface PutReiseIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PutReiseIdRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReiseIdRequest
     */
    'beschreibung'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReiseIdRequest
     */
    'teilnehmer'?: string;
}
/**
 * 
 * @export
 * @interface PutReisezielIdRequest
 */
export interface PutReisezielIdRequest {
    /**
     * 
     * @type {string}
     * @memberof PutReisezielIdRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReisezielIdRequest
     */
    'beschreibung'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReisezielIdRequest
     */
    'datumvon'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReisezielIdRequest
     */
    'datumbis'?: string;
    /**
     * 
     * @type {string}
     * @memberof PutReisezielIdRequest
     */
    'activities'?: string;
}
/**
 * 
 * @export
 * @interface Reise
 */
export interface Reise {
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'beschreibung': string;
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'teilnehmer': string;
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Reise
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<PutReisezielIdRequest>}
     * @memberof Reise
     */
    'reiseziel'?: Array<PutReisezielIdRequest>;
}
/**
 * 
 * @export
 * @interface Reiseziel
 */
export interface Reiseziel {
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'beschreibung': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'datumvon': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'datumbis': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'activities': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Reiseziel
     */
    'updatedAt': string;
    /**
     * 
     * @type {Array<PutReiseIdRequest>}
     * @memberof Reiseziel
     */
    'reisen'?: Array<PutReiseIdRequest>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReiseId: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReiseId', 'id', id)
            const localVarPath = `/reise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReisezielId: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteReisezielId', 'id', id)
            const localVarPath = `/reiseziel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReise: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReiseziel: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reiseziel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostReiseRequest} [postReiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReise: async (postReiseRequest?: PostReiseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reise`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postReiseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {PostReisezielRequest} [postReisezielRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReiseziel: async (postReisezielRequest?: PostReisezielRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reiseziel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postReisezielRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReiseIdRequest} [putReiseIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReiseId: async (id: string, putReiseIdRequest?: PutReiseIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putReiseId', 'id', id)
            const localVarPath = `/reise/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putReiseIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReisezielIdRequest} [putReisezielIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReisezielId: async (id: string, putReisezielIdRequest?: PutReisezielIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putReisezielId', 'id', id)
            const localVarPath = `/reiseziel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer  required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putReisezielIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReiseId(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReiseId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteReiseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReisezielId(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReisezielId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteReisezielId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReise(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reise>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReise(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getReise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReiseziel(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reiseziel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReiseziel(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getReiseziel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {PostReiseRequest} [postReiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReise(postReiseRequest?: PostReiseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reise>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReise(postReiseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postReise']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {PostReisezielRequest} [postReisezielRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postReiseziel(postReisezielRequest?: PostReisezielRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reiseziel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postReiseziel(postReisezielRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.postReiseziel']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReiseIdRequest} [putReiseIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReiseId(id: string, putReiseIdRequest?: PutReiseIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putReiseId(id, putReiseIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putReiseId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReisezielIdRequest} [putReisezielIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putReisezielId(id: string, putReisezielIdRequest?: PutReisezielIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putReisezielId(id, putReisezielIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.putReisezielId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReiseId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReiseId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReisezielId(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReisezielId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReise(options?: any): AxiosPromise<Array<Reise>> {
            return localVarFp.getReise(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReiseziel(options?: any): AxiosPromise<Array<Reiseziel>> {
            return localVarFp.getReiseziel(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostReiseRequest} [postReiseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReise(postReiseRequest?: PostReiseRequest, options?: any): AxiosPromise<Reise> {
            return localVarFp.postReise(postReiseRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {PostReisezielRequest} [postReisezielRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postReiseziel(postReisezielRequest?: PostReisezielRequest, options?: any): AxiosPromise<Reiseziel> {
            return localVarFp.postReiseziel(postReisezielRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReiseIdRequest} [putReiseIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReiseId(id: string, putReiseIdRequest?: PutReiseIdRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putReiseId(id, putReiseIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {string} id 
         * @param {PutReisezielIdRequest} [putReisezielIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putReisezielId(id: string, putReisezielIdRequest?: PutReisezielIdRequest, options?: any): AxiosPromise<void> {
            return localVarFp.putReisezielId(id, putReisezielIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReiseId(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteReiseId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteReisezielId(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteReisezielId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReise(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getReise(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getReiseziel(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getReiseziel(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostReiseRequest} [postReiseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postReise(postReiseRequest?: PostReiseRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postReise(postReiseRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {PostReisezielRequest} [postReisezielRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postReiseziel(postReisezielRequest?: PostReisezielRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).postReiseziel(postReisezielRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {PutReiseIdRequest} [putReiseIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putReiseId(id: string, putReiseIdRequest?: PutReiseIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putReiseId(id, putReiseIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {PutReisezielIdRequest} [putReisezielIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putReisezielId(id: string, putReisezielIdRequest?: PutReisezielIdRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).putReisezielId(id, putReisezielIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



